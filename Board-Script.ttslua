function onLoad(lastModelJSON)
    self.initialize ()
    self.loadModelFromJSON(lastModelJSON)
end

function onSave()
   return JSON.encode(self.model)
end

--[[ INNER-INTERFACE
    * model              -- A table containg the model data
    * loadModelFromJSON  -- Load a model from the JSON representation of the model (if it's there)
    * initialize         -- Inicialization for both model and view
-]]
--[[ REQUIRES
    * BolsaDeTrabajo: :spawnAt(Vector)     -> BolsaDeTrabajo
                      spawnTrabajador()    -> Trabajador
    * Oligarca:       :spawnAt(Vector)     -> Oligarca
                      travelTo(Vector)
    * Trabajador:     :spawnLider()        -> Trabajador
                      travelTo(Vector)
    * BoardPos.ModelPos: ModelPos(Num,Num) -> ModelPos
                         :outOfBoard()     -> ModelPos
                         :render()         -> Vector
                         :localRender()    -> Vector
--]]

---============================================================
-- INTERFACE
---============================================================
model = { trabajadores = conurbanos
        , oligarcas    = republica
        , hayLider     = false
        }

function initialize()
    self.setBoardSnapPoints()
    --view.bolsaDeTrabajo = BolsaDeTrabajo:spawnAt(view.bolsaDeTrabajo_iniPos)
    --self.spawnOligarcaPieces()
end

function loadModelFromJSON(modelJSON)
    if modelJSON ~= "" then
        local currentModel = JSON.decode(modelJSON)
        self.loadModel(currentModel)
    end
end

--==============================================================
-- GAME DATA
--   (includes "model", from the interface)
--==============================================================
view =  {
         bolsaDeTrabajo = nil
         bolsaDeTrabajo_iniPos = ModelPos:outOfBoard():render()

         oligarcas = { nil, nil, nil, nil }
         oligarcas_iniPos = {
              ModelPos(-2,0):render()
            , ModelPos(-1,0):render()
            , ModelPos( 1,0):render()
            , ModelPos( 2,0):render()
        }

-- Datos de modelo
conurbanos = { ModelPos(4, 4), ModelPos(-4, 4)
             , ModelPos(4,-4), ModelPos(-4,-4)
             }
republica  = { ModelPos(1, 1), ModelPos(-1, 1)
             , ModelPos(1,-1), ModelPos(-1,-1)
             }

function setBoardSnapPoints()
    local snapPoints = {}
    for i = 1, 5 do
        for j = 1, 5 do
            table.insert(snapPoints, { position=BoardPos( i, j):localRender() } )
            table.insert(snapPoints, { position=BoardPos(-i, j):localRender() } )
            table.insert(snapPoints, { position=BoardPos(-i,-j):localRender() } )
            table.insert(snapPoints, { position=BoardPos( i,-j):localRender() } )
        end
    end
    self.setSnapPoints(snapPonts)
end

function spawnOligarcaPieces()
   for i = 1,4 do
     self.view.oligarcas[i] = Oligarca:spawnAt(self.view.oligarcas_iniPos[i])
   end
end

function renderTrabajadores()
   local trabajador
   for i, trabajadorPos in pairs(model.trabajadores) do
      self.renderTrabajadorAt(trabajadorPos, model.hayLider and i==1)
   end
end

function renderTrabajadorAt(trabajadorPos, esLider)
    if esLider
    then trabajador = Trabajador:spawnLider()
    else trabajador = bolsaDeTrabajo.spawnTrabajador()
    end
    trabajador.travelTo(trabajadorPos)
end

function renderOligarcas()
   local oligarca
   for i, oligarcaPos in pairs(model.oligarcas) do
       oligarca[i].travelTo(oligarcaPos)
   end
end

--[[============================================================
-- Auxiliaries
-- (TO-DO:organize!)
--============================================================--]]
function loadModel(currentModel)
   model = currentModel
   self.renderModel()
end

function renderModel()
   self.renderTrabajadores()
   self.renderOligarcas()
end
