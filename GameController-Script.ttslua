--[[
AUTHOR: Pablo E. --Fidel-- Martínez López
DATE: 11-Ago-2020
CONTACT EMAIL: fidel.ml@gmail.com
LICENSE:  GNU GENERAL PUBLIC LICENSE, Version 3
FILES: GameController-Global, GameController-Creation, GameController-Script
VERSION: 1.0
--]]

--[[
This module provides the code needed to configure a "remote control" with configurable
buttons. When a button is pressed, confirmation is required.

The intended usage is to have a thin BlockRectangle configured on the scene,
and put this code in its script.
The code provided in "GameController-Creation" gives a sample code for that configuration.

After that, in "Global". set a variable "gameControl_GUID" with its GUID, paste
the two functions provided below ("initializeGameControl" and "controlButtons")
on your global script, and call "initializeGameControl()" in the "onLoad" function.
The code provided in "GameController-Global" provides these two, and a sample of
buttons.

The maximum number of buttons allowed is 8. Callback functions are supposed to
be defined in the global script as well.

function initializeGameControl()
    local verbose = false
      -- Switching it to true (or not sending it) turns verbosity on
    table.insert(permanents, gameControl_GUID)
    control = getObjectFromGUID(gameControl_GUID)
    control.call("init", { controlButtons(), verbose } )
end

function controlButtons()
    local b1Spec = {label="Button 1", func="callbackButton1"}
    ...
    local b8Spec = {label="Button 8", func="callbackButton8"}
    local spaceSpec = { }
    return { b1Spec, ..., b8Spec}
      -- Less than 8 are allowed
      -- Spaces can be specified replacing bNSpec by spaceSpec
end
--]]

--[[
    TO DO LIST:
    1. Add small button to rotate and face the camera
    2. Add small button to pop-up to screen
    3. Use images on buttons
    4. Add support for calling callbacks in different objects
--]]

function init(params)
    --[[ PARAMETERS:
         1. a table with 1 to 8 elements
             { { label="BUTTON LABEL", func="callbackFunction" }, ... }
            The callbackFunction must be defined on Global
         2. an optional boolean, indicating if operations are verbose
             (default: true)
    --]]
    createButtons(params[1], params[2])
    self.setRotation(Vector(0,180,0))
end

function createButtons(buttonSpecs, verbose)
    local verbose = verbose or true
    self.setVar("verbose", verbose)
    for i = 1, math.min(8,#buttonSpecs) do
        createIthLabelledButton(i, buttonSpecs[i], verbose)
    end
end

function createIthLabelledButton(index, buttonSpec, verbose)
    local label = buttonSpec.label
    if label ~= nil and buttonSpec.func ~= nil then
        local confirm       = function() inform("confirmed \'", label, "\'")
                                         Global.call(buttonSpec.func)
                                         clearOptions()
                              end
        local cancel        = function() inform("cancelled \'", label, "\'")
                                         clearOptions()
                              end
        local confirmChoice = function() confirmedButtonBehaviour(index) end
        self.setVar("confirm"..index, confirm)
        self.setVar("cancel", cancel)
        self.setVar("confirmedButtonBehaviour"..index, confirmChoice)
        self.createButton(labelledButtonParameters(padded(label,11), Vector(0.1,0.5,index*0.1-0.5)))
        self.createButton(labelledButtonParameters(".", Vector(-0.3,0.5,index*0.1-0.5), "confirmedButtonBehaviour"..index))
    end
end

function confirmedButtonBehaviour(i)
    if verbose then print("") end
    inform("confirm operation or cancel")
    self.createButton(buttonParameters("confirm"..i,   "Ok", Vector(-0.1,1,0.425)))
    self.createButton(buttonParameters("cancel", "X",  Vector( 0.1,1,0.425)))
end

function clearOptions()
    local buttons = self.getButtons()
    for _,v in ipairs(buttons) do
        if (v.label == "Ok" or v.label == "X") then self.removeButton(v.index) end
    end
end

function labelledButtonParameters(name,pos,func)
    local veryLightGray = { r=0.9, g=0.9, b=0.9 }
    local params = buttonParameters(func, name, pos, 80, 50, veryLightGray)
    if func==nil  -- That is, it's a label
    then params.width  = 0
         params.height = 0
         params.click_function = "iAmALabel"
         params.font_color =  veryLightGray
    end
    return params
end

function buttonParameters(clickFun, label, pos, w, h, color)
    local w = w or 80
    local h = h or 50
    local color = color or  {r=1, g=1, b=1}
    return { click_function = clickFun
           , function_owner = self
           , label     = label
           , position  = pos
           , rotation  = Vector(0, 0, 0)
           , width     = w
           , height    = h
           , font_size = 50
           , color     = color
           }
end

function inform(msg, ...)
    if verbose then
        if ... == nil then
            print("CONTROL: ", msg)
        else
            print("CONTROL: ", msg, ...)
        end
    end
end

function iAmALabel() print("ERROR: I am a label (I am not supposed to be pressed)") end
function padded(str,len) return (string.sub(str.."           ", 1, len)) end
