--[[ GameBox-Script
    -- ----------------------
    PURPOSE: to provide the behaviour for the TTS GameBox object during TTS execution
    -- ----------------------
    INTERFACE:
        * YourGameBox:config(), for additional configuration, if needed
        * YourGameBox:startGame(), to start the game
    -- ----------------------
    USAGE: (temporary)
           this module is just a sample of how to arrange GameBox-Scripts for other
           games. Copy it to your game, and provide YourGameBox:config() and YourGameBox:startGame().
           It works together with the UIs specified by the GameBox-Script*.xml files.
    -- ----------------------
    TO DO LIST:
       * provide an example Game
       * to provide a better UI for RulesWindow
    -- ----------------------
<## REQUIRES:
    ["/Utils/Prelude"]
##>
    -- ----------------------
--]]
function Import_Game()
    if Game~=nil then return 1 end
    Import_Prelude()

    Game = {
          gname     = "G-TTS_Game"
        , gtype     = "GModule"

        , interface = { "self:initalize([state [,debugLevel]])"
                      , "self:saveState()"
                      }

        -- Instance variables
        , components = { }
        , savedState = { }
    }

    function Game:initialize(state, debugLevel)
        local debugLevel = debugLevel or 0
        Prelude_Debug.setDebugLevelAt_(debugLevel)
        Prelude_Debug.DEBUG("Start initialization of "..self.gname.."...")
        print("At present, no components (to be completed by instances...)")
        Prelude_List.all_Do_(self.components, function(c) c:initialize() end)
        self.savedState = state
        Prelude_Debug.DEBUG("--End initialization thread.")
    end

    function Game:saveState()
        local states = {}
        return states
    end
end

function Import_GameBoxScript(context)
    Import_Game()

    if GameBox~=nil then return 1 end
    GameBox = {
          gname     = "GameBox basic operations"
        , gtype     = "GModule"
    }

    function GameBox:config()
      -- PURPOSE: to provide additional configuration for your GameBox
      --         (For example, more buttons with additional behaviour)
      -- TO DO LIST: Add buttons to save and load on the web
      Prelude_Debug.DEBUG("GameBox:config() successful")
    end

    function GameBox:startGame()
        Game:initialize()
    end

    -- --------------------------------------------------------------
    --  Buttons behaviour
    -- --------------------------------------------------------------
    function startButtonBehaviour()   -- Button behaviours must be globally defined!!
        GameBox:startGame()
    end

    function rulesButtonBehaviour()  -- Toogle the rules window (on Global)
        if UI.getAttribute(myRulesWindowID(), "active")=="true"
          then UI.hide(myRulesWindowID())
          else UI.show(myRulesWindowID())
         end
    end

    function rulesCloseButtonBehaviour()
        UI.hide(myRulesWindowID())
    end

    -- --------------------------------------------------------------
    --  Auxiliaries
    -- --------------------------------------------------------------
    function myRulesWindowID()
        -- PURPOSE: returns a String with the corresponding ID
        return Prelude_TTS.specialiseUI_To_("$SELF.RulesWindow", self)
    end
end

function onLoad(savedData)
    local savedState = JSON.decode(savedData or "")
    Import_GameBoxScript(self)  -- Solves a conflict between self used by TTS for
                                --  its script, and self used by LUA for its methods
                                --  inside the GModule GameBoxScript
    -- Player["White"].lookAt({
    --     position = {x=-33,y=-2,z=0},
    --     pitch    = 30,
    --     yaw      = 280,
    --     distance = 0,
    -- })

    -- Prelude_Debug.setDebugLevelAt_(1)
    GameBox:config()
    --Game:initialize(savedState, 1) -- 0 or nil for no Debug information
    -- Wait.condition(function() Game:spawn()        end,
    --                function() return Game:ready() end)

    -- print("Must be completed at "..myRulesWindowID().."...")
end

-- function onSave()
--     return (JSON.encode(Game:saveState()))
-- end
